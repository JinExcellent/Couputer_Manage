!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/jin/computer_cluster/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/p6.1.20250302.0/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
ADMIN_FILE	globalfile.h	/^#define ADMIN_FILE /;"	d
AddPerson	manager.cpp	/^void Manager::AddPerson(){$/;"	f	class:Manager	typeref:typename:void
ApplyOrder	student.cpp	/^void Student::ApplyOrder(){$/;"	f	class:Student	typeref:typename:void
Base_GetName_	identity.h	/^        inline string Base_GetName_(){ return Name_; }$/;"	f	class:Identity	typeref:typename:string
Base_GetPwd_	identity.h	/^        inline string Base_GetPwd_(){ return Pwd_; }$/;"	f	class:Identity	typeref:typename:string
Base_SetName_	identity.h	/^        inline void Base_SetName_(string name) { Name_ = name; }$/;"	f	class:Identity	typeref:typename:void
Base_SetPwd_	identity.h	/^        inline void Base_SetPwd_(string pwd) {Pwd_ = pwd; }$/;"	f	class:Identity	typeref:typename:void
COMPUTERROOM_H_	computerRoom.h	/^#define COMPUTERROOM_H_$/;"	d
COMPUTER_FILE	globalfile.h	/^#define COMPUTER_FILE /;"	d
CancelOrder	student.cpp	/^void Student::CancelOrder(){$/;"	f	class:Student	typeref:typename:void
CheckRepeat	manager.cpp	/^bool Manager::CheckRepeat(int id, int type){$/;"	f	class:Manager	typeref:typename:bool
CleanFile	manager.cpp	/^void Manager::CleanFile(){$/;"	f	class:Manager	typeref:typename:void
ComputerRoom	computerRoom.h	/^class ComputerRoom{$/;"	c
GLOBALFILE_H_	globalfile.h	/^#define GLOBALFILE_H_$/;"	d
GetID_	student.h	/^        inline int GetID_() { return ID_; }$/;"	f	class:Student	typeref:typename:int
GetID_	teacher.h	/^        inline int GetID_() { return ID_; }$/;"	f	class:Teacher	typeref:typename:int
GetMapMem	orderfile.h	/^        inline std::string GetMapMem(const int indx , const char * ch){$/;"	f	class:OrderFile	typeref:typename:std::string
GetMaxNum	computerRoom.h	/^        inline int GetMaxNum() {return MaxNum; }$/;"	f	class:ComputerRoom	typeref:typename:int
GetName_	student.h	/^        inline string GetName_() { return Base_GetName_(); }$/;"	f	class:Student	typeref:typename:string
GetName_	teacher.h	/^        inline string GetName_() { return Base_GetName_(); }$/;"	f	class:Teacher	typeref:typename:string
GetPwd_	student.h	/^        inline string GetPwd_() { return Base_GetPwd_(); }$/;"	f	class:Student	typeref:typename:string
GetPwd_	teacher.h	/^        inline string GetPwd_() { return Base_GetPwd_(); }$/;"	f	class:Teacher	typeref:typename:string
GetRoomID	computerRoom.h	/^        inline int GetRoomID(){ return RoomID; }$/;"	f	class:ComputerRoom	typeref:typename:int
GetSize_	orderfile.h	/^        inline int GetSize_(){ return Size_; }$/;"	f	class:OrderFile	typeref:typename:int
IDENTITY_H_	identity.h	/^#define IDENTITY_H_$/;"	d
ID_	student.h	/^        int ID_;$/;"	m	class:Student	typeref:typename:int
ID_	teacher.h	/^        int ID_;$/;"	m	class:Teacher	typeref:typename:int
Identity	identity.h	/^        Identity(){};$/;"	f	class:Identity
Identity	identity.h	/^        Identity(string name, string pwd):Name_(name), Pwd_(pwd) { }$/;"	f	class:Identity
Identity	identity.h	/^class Identity{$/;"	c
InitVectorCom	student.cpp	/^void Student::InitVectorCom(){$/;"	f	class:Student	typeref:typename:void
InitVectorMem	manager.cpp	/^void Manager::InitVectorMem(){$/;"	f	class:Manager	typeref:typename:void
InitVectorRom	manager.cpp	/^void Manager::InitVectorRom(){$/;"	f	class:Manager	typeref:typename:void
LogIn	main.cpp	/^void LogIn(string fileNmae, int type){$/;"	f	typeref:typename:void
MANAGER_H_	manager.h	/^#define MANAGER_H_$/;"	d
Manager	manager.cpp	/^Manager::Manager(){$/;"	f	class:Manager
Manager	manager.cpp	/^Manager::Manager(string name, string pwd):Identity(name, pwd){$/;"	f	class:Manager
Manager	manager.h	/^class Manager: public Identity{$/;"	c
ManagerMenu	main.cpp	/^void ManagerMenu(Identity* manager){        \/\/这里为何要时用基类的指针？ 为何不/;"	f	typeref:typename:void
MaxNum	computerRoom.h	/^        int MaxNum;$/;"	m	class:ComputerRoom	typeref:typename:int
Name_	identity.h	/^        string  Name_;$/;"	m	class:Identity	typeref:typename:string
ORDERFILE_H_	orderfile.h	/^#define ORDERFILE_H_$/;"	d
ORDER_FILE	globalfile.h	/^#define ORDER_FILE /;"	d
OpenMenu	manager.cpp	/^void Manager::OpenMenu(){$/;"	f	class:Manager	typeref:typename:void
OpenMenu	student.cpp	/^void Student::OpenMenu(){$/;"	f	class:Student	typeref:typename:void
OpenMenu	teacher.cpp	/^void Teacher::OpenMenu(){$/;"	f	class:Teacher	typeref:typename:void
OrderDate_	orderfile.h	/^        std::map<int, std::map<std::string, std::string>> OrderDate_;$/;"	m	class:OrderFile	typeref:typename:std::map<int,std::map<std::string,std::string>>
OrderFile	orderfile.cpp	/^OrderFile::OrderFile(){$/;"	f	class:OrderFile
OrderFile	orderfile.h	/^class OrderFile{$/;"	c
PrintStudent	manager.cpp	/^void PrintStudent(Student & s){$/;"	f	typeref:typename:void
PrintTeacher	manager.cpp	/^void PrintTeacher(Teacher & t){$/;"	f	typeref:typename:void
Pwd_	identity.h	/^        string  Pwd_;$/;"	m	class:Identity	typeref:typename:string
RoomID	computerRoom.h	/^        int RoomID;$/;"	m	class:ComputerRoom	typeref:typename:int
STUDENT_FILE	globalfile.h	/^#define STUDENT_FILE /;"	d
STUDENT_H_	student.h	/^#define STUDENT_H_$/;"	d
SetID_	student.cpp	/^bool Student::SetID_(std::ifstream & is){$/;"	f	class:Student	typeref:typename:bool
SetID_	teacher.cpp	/^bool Teacher::SetID_(std::ifstream & is){$/;"	f	class:Teacher	typeref:typename:bool
SetMapMem	orderfile.h	/^        inline void SetMapMem(const int indx, const char* ch , const std::string val){$/;"	f	class:OrderFile	typeref:typename:void
SetMaxNum	computerRoom.h	/^        inline bool SetMaxNum(std::ifstream & is){ return (is >> MaxNum)?true:false; }$/;"	f	class:ComputerRoom	typeref:typename:bool
SetName_	student.cpp	/^bool Student::SetName_(std::ifstream &is){$/;"	f	class:Student	typeref:typename:bool
SetName_	teacher.cpp	/^bool Teacher::SetName_(std::ifstream &is){$/;"	f	class:Teacher	typeref:typename:bool
SetPwd_	student.cpp	/^bool Student::SetPwd_(std::ifstream &is){$/;"	f	class:Student	typeref:typename:bool
SetPwd_	teacher.cpp	/^bool Teacher::SetPwd_(std::ifstream &is){$/;"	f	class:Teacher	typeref:typename:bool
SetRoomID	computerRoom.h	/^        inline bool SetRoomID(std::ifstream & is){ return (is>>RoomID)?true:false; }$/;"	f	class:ComputerRoom	typeref:typename:bool
ShowAllOrder	student.cpp	/^void Student::ShowAllOrder(){$/;"	f	class:Student	typeref:typename:void
ShowAllOrder	teacher.cpp	/^void Teacher::ShowAllOrder(){$/;"	f	class:Teacher	typeref:typename:void
ShowComputer	manager.cpp	/^void Manager::ShowComputer(){$/;"	f	class:Manager	typeref:typename:void
ShowMyOrder	student.cpp	/^void Student::ShowMyOrder(){$/;"	f	class:Student	typeref:typename:void
ShowPerson	manager.cpp	/^void Manager::ShowPerson(){$/;"	f	class:Manager	typeref:typename:void
Size_	orderfile.h	/^        int Size_;      \/\/记录容器中的元素个数,并作为内部容器的key值$/;"	m	class:OrderFile	typeref:typename:int
Student	student.cpp	/^Student::Student(){$/;"	f	class:Student
Student	student.cpp	/^Student::Student(int id , string name , string pwd):ID_(id), Identity(name, pwd){$/;"	f	class:Student
Student	student.h	/^class Student: public Identity{$/;"	c
StudentMenu	main.cpp	/^void StudentMenu(Identity* student){$/;"	f	typeref:typename:void
TEACHER_FILE	globalfile.h	/^#define TEACHER_FILE /;"	d
TEACHER_H_	teacher.h	/^#define TEACHER_H_$/;"	d
Teacher	teacher.cpp	/^Teacher::Teacher(){$/;"	f	class:Teacher
Teacher	teacher.cpp	/^Teacher::Teacher(int id, string name, string pwd):ID_(id) , Identity(name, pwd){$/;"	f	class:Teacher
Teacher	teacher.h	/^class Teacher: public Identity{$/;"	c
TeacherMenu	main.cpp	/^void TeacherMenu(Identity* teacher){$/;"	f	typeref:typename:void
UpdataOrder	orderfile.cpp	/^void OrderFile::UpdataOrder(){$/;"	f	class:OrderFile	typeref:typename:void
VerifyOrder	teacher.cpp	/^void Teacher::VerifyOrder(){$/;"	f	class:Teacher	typeref:typename:void
main	main.cpp	/^int main() {$/;"	f	typeref:typename:int
operator >>	identity.cpp	/^bool operator>>(std::ifstream & is, string & val){$/;"	f	typeref:typename:bool
vCom	student.h	/^        std::vector<ComputerRoom> vCom;$/;"	m	class:Student	typeref:typename:std::vector<ComputerRoom>
vRom	manager.h	/^        std::vector<ComputerRoom> vRom;$/;"	m	class:Manager	typeref:typename:std::vector<ComputerRoom>
vStu	manager.h	/^        std::vector<Student> vStu;$/;"	m	class:Manager	typeref:typename:std::vector<Student>
vTea	manager.h	/^        std::vector<Teacher> vTea;$/;"	m	class:Manager	typeref:typename:std::vector<Teacher>
~OrderFile	orderfile.h	/^        ~OrderFile() {};$/;"	f	class:OrderFile
